{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _ClearIcon, _ArrowDropDownIcon;\n\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/core';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(_ref => {\n  let {\n    ownerState\n  } = _ref;\n  return _extends({\n    [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n        visibility: 'visible'\n      }\n    }\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [`& .${autocompleteClasses.tag}`]: _extends({\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    }, ownerState.size === 'small' && {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    }),\n    [`& .${autocompleteClasses.inputRoot}`]: {\n      flexWrap: 'wrap',\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        width: 0,\n        minWidth: 30\n      }\n    },\n    [`& .${inputClasses.root}`]: {\n      paddingBottom: 1,\n      '& .MuiInput-input': {\n        padding: '4px 4px 4px 0px'\n      }\n    },\n    [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      [`& .${inputClasses.input}`]: {\n        padding: '2px 4px 3px 0'\n      }\n    },\n    [`& .${outlinedInputClasses.root}`]: {\n      padding: 9,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '7.5px 4px 7.5px 6px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      padding: 6,\n      [`& .${autocompleteClasses.input}`]: {\n        padding: '2.5px 4px 2.5px 6px'\n      }\n    },\n    [`& .${filledInputClasses.root}`]: {\n      paddingTop: 19,\n      paddingLeft: 8,\n      [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 26 + 4 + 9\n      },\n      [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n        paddingRight: 52 + 4 + 9\n      },\n      [`& .${filledInputClasses.input}`]: {\n        padding: '7px 4px'\n      },\n      [`& .${autocompleteClasses.endAdornment}`]: {\n        right: 9\n      }\n    },\n    [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n      paddingBottom: 1,\n      [`& .${filledInputClasses.input}`]: {\n        padding: '2.5px 4px'\n      }\n    },\n    [`& .${autocompleteClasses.input}`]: _extends({\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    }, ownerState.inputFocused && {\n      opacity: 1\n    })\n  });\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (_ref2, styles) => {\n    let {\n      ownerState\n    } = _ref2;\n    return _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen);\n  }\n})(_ref3 => {\n  let {\n    ownerState\n  } = _ref3;\n  return _extends({\n    padding: 2,\n    marginRight: -2\n  }, ownerState.popupOpen && {\n    transform: 'rotate(180deg)'\n  });\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(_ref4 => {\n  let {\n    theme,\n    ownerState\n  } = _ref4;\n  return _extends({\n    zIndex: theme.zIndex.modal\n  }, ownerState.disablePortal && {\n    position: 'absolute'\n  });\n});\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return _extends({}, theme.typography.body1, {\n    overflow: 'auto'\n  });\n});\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(_ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  };\n});\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(_ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto',\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 'auto'\n      },\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&[aria-disabled=\"true\"]': {\n        opacity: theme.palette.action.disabledOpacity,\n        pointerEvents: 'none'\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.palette.action.focus\n      },\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n        [`&.${autocompleteClasses.focused}`]: {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: theme.palette.action.selected\n          }\n        },\n        [`&.${autocompleteClasses.focusVisible}`]: {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n        }\n      }\n    }\n  };\n});\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(_ref9 => {\n  let {\n    theme\n  } = _ref9;\n  return {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  };\n});\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _componentsProps$clea;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, componentsProps.clearIndicator, {\n              className: clsx(classes.clearIndicator, (_componentsProps$clea = componentsProps.clearIndicator) == null ? void 0 : _componentsProps$clea.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              ownerState: ownerState,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        ownerState: ownerState,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_ClearIcon","_ArrowDropDownIcon","_excluded","React","PropTypes","clsx","chainPropTypes","integerPropType","unstable_composeClasses","composeClasses","useAutocomplete","createFilterOptions","alpha","Popper","ListSubheader","Paper","IconButton","Chip","inputClasses","inputBaseClasses","outlinedInputClasses","filledInputClasses","ClearIcon","ArrowDropDownIcon","useThemeProps","styled","autocompleteClasses","getAutocompleteUtilityClass","capitalize","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","disablePortal","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","slots","root","inputRoot","input","tag","endAdornment","clearIndicator","popupIndicator","popper","paper","listbox","loading","noOptions","option","groupLabel","groupUl","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","sizeSmall","right","paddingTop","paddingLeft","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompletePopper","popperDisablePortal","theme","zIndex","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","main","selectedOpacity","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","Autocomplete","forwardRef","inProps","ref","_componentsProps$clea","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","as","style","clientWidth","role","open","onMouseDown","event","preventDefault","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","Error","join","filterOptions","func","getOptionDisabled","isOptionEqualToValue","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","sx"],"sources":["E:/converge2-main/node_modules/@mui/material/Autocomplete/Autocomplete.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _ClearIcon, _ArrowDropDownIcon;\n\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/core';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => _extends({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, ownerState.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 6px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    padding: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 6px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, ownerState.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})(({\n  ownerState\n}) => _extends({\n  padding: 2,\n  marginRight: -2\n}, ownerState.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  zIndex: theme.zIndex.modal\n}, ownerState.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _componentsProps$clea;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, componentsProps.clearIndicator, {\n              className: clsx(classes.clearIndicator, (_componentsProps$clea = componentsProps.clearIndicator) == null ? void 0 : _componentsProps$clea.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              ownerState: ownerState,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        ownerState: ownerState,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"],"mappings":"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"},"metadata":{},"sourceType":"module"}